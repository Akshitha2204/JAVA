class Node {
    int data;
    Node prev;
    Node next;

    public Node(int data) {
        this.data = data;
        this.prev = null;
        this.next = null;
    }
}

class DoublyLinkedList {
    Node head;
    Node tail;

    public DoublyLinkedList() {
        head = null;
        tail = null;
    }

    // Insert a new node at the end of the list
    public void insert(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            tail = newNode;
        } else {
            tail.next = newNode;
            newNode.prev = tail;
            tail = newNode;
        }
    }

        public void deleteNodeAtPosition(int position) {
        if (head == null) {
            System.out.println("List is empty. Cannot delete.");
            return;
        }

        Node temp = head;
        int i = 1;

        // Traverse to the node at the specified position
        while (i < position && temp != null) {
            temp = temp.next;
            i++;
        }

        if (temp == null) {
            System.out.println("Position " + position + " is out of range.");
            return;
        }

        // Update the previous node's 'next' pointer
        if (temp.prev != null) {
            temp.prev.next = temp.next;
        }

        // Update the next node's 'prev' pointer
        if (temp.next != null) {
            temp.next.prev = temp.prev;
        }

        // Free memory for the deleted node
        temp = null;
    }

    // Display the contents of the list
    public void display() {
        Node current = head;
        System.out.print("Doubly Linked List: ");
        while (current != null) {
            System.out.print(current.data + " <-> ");
            current = current.next;
        }
        System.out.println("null");
    }
}

public class DDL {
    public static void main(String[] args) {
        DoublyLinkedList list = new DoublyLinkedList();

        // Insert elements into the doubly linked list
        list.insert(1);
        list.insert(2);
        list.insert(3);
        list.insert(4);
        list.insert(5);

        // Display the original list
        list.display();

        int elementToDelete = 3;
        // Delete a given element from the list
        list.delete(elementToDelete);

        // Display the list after deletion
        list.display();
    }
}
