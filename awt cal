import java.awt.*;
import java.awt.event.*;

public class AWTCalculator extends Frame implements ActionListener {
    private TextField textField;
    private Button[] numberButtons;
    private Button[] operationButtons;
    private Button equalsButton;
    private Button clearButton; // New "Clear" button
    private double currentValue = 0.0;
    private char currentOperation = ' ';

    public AWTCalculator() {
        setTitle(" Calculator");
        setSize(300, 400);
        setLayout(new BorderLayout());

        textField = new TextField();
        add(textField, BorderLayout.NORTH);

        Panel buttonPanel = new Panel();
        buttonPanel.setLayout(new GridLayout(5, 4));

        numberButtons = new Button[10];
        for (int i = 0; i < 10; i++) {
            numberButtons[i] = new Button(Integer.toString(i));
            numberButtons[i].addActionListener(this);
            buttonPanel.add(numberButtons[i]);
        }

        operationButtons = new Button[4];
        operationButtons[0] = new Button("+");
        operationButtons[1] = new Button("-");
        operationButtons[2] = new Button("*");
        operationButtons[3] = new Button("/");

        for (Button operationButton : operationButtons) {
            operationButton.addActionListener(this);
            buttonPanel.add(operationButton);
        }

        equalsButton = new Button("=");
        equalsButton.addActionListener(this);
        buttonPanel.add(equalsButton);

        clearButton = new Button("Clear"); // Creating the "Clear" button
        clearButton.addActionListener(this);
        buttonPanel.add(clearButton); // Adding the new "Clear" button

        add(buttonPanel, BorderLayout.CENTER);

        setVisible(true);

        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent windowEvent) {
                System.exit(0);
            }
        });
    }

    public void actionPerformed(ActionEvent e) {
        String command = e.getActionCommand();

        if (command.matches("[0-9]")) {
            textField.setText(textField.getText() + command);
        } else if ("+-*/".contains(command)) {
            currentValue = Double.parseDouble(textField.getText());
            currentOperation = command.charAt(0);
            textField.setText("");
        } else if ("=".equals(command)) {
            double secondValue = Double.parseDouble(textField.getText());
            double result = 0.0;

            try {
                switch (currentOperation) {
                    case '+':
                        result = currentValue + secondValue;
                        break;
                    case '-':
                        result = currentValue - secondValue;
                        break;
                    case '*':
                        result = currentValue * secondValue;
                        break;
                    case '/':
                        if (secondValue == 0) {
                            textField.setText("Error: Divide by zero");
                            return;
                        }
                        result = currentValue / secondValue;
                        break;
                }

                textField.setText(Double.toString(result));
            } catch (ArithmeticException ex) {
                textField.setText("Error: " + ex.getMessage());
            }
        } else if ("Clear".equals(command)) {
            textField.setText(""); // Clear the text field
            currentValue = 0.0;
            currentOperation = ' ';
        }
    }

    public static void main(String[] args) {
        new AWTCalculator();
    }
}

